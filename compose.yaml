services:
  app:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
    image: ${DOCKER_USERNAME}/${PACKAGE_NAME}:${PACKAGE_VERSION}
    container_name: ${PACKAGE_NAME}_api
    ports:
      - '${PORT}:${PORT}'
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      disable: true
    command: >
      sh -c "
        npx prisma migrate deploy &&
        pnpm start
      "
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    labels:
      - 'app.name=${PACKAGE_NAME}'
      - 'app.version=${PACKAGE_VERSION}'
      - 'deployment.type=zero-downtime'

  db:
    image: postgres
    container_name: ${PG_DATABASE}
    restart: always
    environment:
      POSTGRES_USER: ${PG_USERNAME}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '${PG_PORT}:${PG_PORT}'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    healthcheck:
      test:
        ['CMD', 'pg_isready', '-U', '${PG_USERNAME}', '-d', '${PG_DATABASE}']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  redis:
    image: redis
    container_name: ${REDIS_CONTAINER}
    restart: always
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1000mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 1000M
        reservations:
          cpus: '0.1'
          memory: 1000M
    logging:
      driver: 'json-file'
      options:
        max-size: '5m'
        max-file: '3'

  nginx:
    image: nginx:alpine
    container_name: ${PACKAGE_NAME}_nginx
    depends_on:
      - app
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/selfsigned:/etc/nginx/selfsigned
    ports:
      - '80:80'
      - '443:443'
    networks:
      - default
    restart: always

  certbot:
    image: certbot/certbot
    container_name: ${PACKAGE_NAME}_certbot
    volumes:
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/certbot/conf:/etc/letsencrypt
    env_file:
      - .env
    entrypoint: >
      certbot certonly --webroot --webroot-path=/var/www/certbot 
      --email ${EMAIL} --agree-tos --no-eff-email 
      -d ${BASE_URL}
    depends_on:
      - nginx
    networks:
      - default
    restart: 'no'

  certbot-renew:
    image: certbot/certbot
    container_name: ${PACKAGE_NAME}_certbot_renew
    volumes:
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx/certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "trap exit TERM; 
             while :; do 
               echo 'ðŸ”„ Checking for SSL renewal...'; 
               certbot renew --webroot --webroot-path=/var/www/certbot --quiet --deploy-hook 'nginx -s reload'; 
               sleep 12h; 
             done"
    depends_on:
      - nginx
    networks:
      - default
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: ${PACKAGE_NAME}_network
    labels:
      - 'project=${PACKAGE_NAME}'
