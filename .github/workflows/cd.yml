name: CD Pipeline with Zero Downtime

on:
  workflow_run:
    workflows: ['CI Pipeline']
    types:
      - completed

jobs:
  deploy:
    name: Deploy to VPS with Zero Downtime 🔄
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'

    steps:
      # 1️⃣ Checkout the repository
      - name: Checkout Code 📥
        uses: actions/checkout@v4

      # 2️⃣ Verify basic env variables
      - name: Verify environment variables 📋
        env:
          NODE_ENV: production
          IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
          PACKAGE_NAME: ${{ secrets.PACKAGE_NAME }}
          PACKAGE_VERSION: ${{ secrets.PACKAGE_VERSION }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
        run: |
          echo "🧪 Checking variables:"
          echo "Node env: ${NODE_ENV}"
          echo "Docker image: ${IMAGE_TAG}"
          echo "Package name: ${PACKAGE_NAME}"
          echo "Package version: ${PACKAGE_VERSION}"
          echo "VPS host: ${VPS_HOST}"
          echo "✅ Variables ready"

      # 3️⃣ Setup SSH
      - name: Setup SSH 🔐
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write private key
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Add server host key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Clean SSH config
          cat > ~/.ssh/config <<EOF
          Host deploy-server
            HostName ${{ secrets.VPS_HOST }}
            User ${{ secrets.VPS_USER }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
          EOF

          chmod 600 ~/.ssh/config

      # 4️⃣ Test SSH connection
      - name: Test SSH Connection ✅
        run: ssh deploy-server "echo '🎉 SSH Connected Successfully!'"

      # 5️⃣ Create server folder & copy compose + scripts
      - name: Copy Compose & Scripts 📁
        run: |
          echo "Creating directories..."
          ssh deploy-server "mkdir -p ~/${{ secrets.PACKAGE_NAME}}/scripts"
          echo "Copying compose.yaml..."
          scp compose.yaml deploy-server:~/${{ secrets.PACKAGE_NAME}}/compose.yaml
          echo "Copying scripts folder..."
          scp -r scripts deploy-server:~/${{ secrets.PACKAGE_NAME}}/
          echo "✅ Files copied successfully"

      # 6️⃣ Generate .env from secrets
      - name: Generate .env on server 🌐
        run: |
          ssh deploy-server "cat > ~/${{ secrets.PACKAGE_NAME}}/.env <<EOF
          NODE_ENV=${{ secrets.NODE_ENV }}
          PORT=${{ secrets.PORT }}
          EMAIL=${{ secrets.EMAIL }}
          BASE_URL=${{ secrets.BASE_URL }}
          
          IMAGE_TAG=${{ secrets.IMAGE_TAG }}
          PACKAGE_NAME=${{ secrets.PACKAGE_NAME }}
          PACKAGE_VERSION=${{ secrets.PACKAGE_VERSION }}
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}

          DATABASE_URL=${{ secrets.DATABASE_URL }}

          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}

          MAIL_USER=${{ secrets.MAIL_USER }}
          MAIL_PASS=${{ secrets.MAIL_PASS }}

          SUPER_ADMIN_EMAIL=${{ secrets.SUPER_ADMIN_EMAIL }}
          SUPER_ADMIN_PASS=${{ secrets.SUPER_ADMIN_PASS }}

          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}

          TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}

          OAUTH_CLIENT_ID=${{ secrets.OAUTH_CLIENT_ID }}
          OAUTH_CLIENT_SECRET=${{ secrets.OAUTH_CLIENT_SECRET }}

          TWITTER_CONSUMER_KEY=${{ secrets.TWITTER_CONSUMER_KEY }}
          TWITTER_CONSUMER_SECRET=${{ secrets.TWITTER_CONSUMER_SECRET }}
          TWITTER_REDIRECT_URL=${{ secrets.TWITTER_REDIRECT_URL }}

          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}

          FRONTEND_VERIFICATION_URL=${{ secrets.FRONTEND_VERIFICATION_URL }}
          FRONTEND_RESET_PASSWORD_URL=${{ secrets.FRONTEND_RESET_PASSWORD_URL }}

          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}

          HYPERHUMAN_X_API_KEY=${{ secrets.HYPERHUMAN_X_API_KEY }}
          HYPERHUMAN_ORGANIZATION_ID=${{ secrets.HYPERHUMAN_ORGANIZATION_ID }}

          VPS_USER=${{ secrets.VPS_USER }}
          VPS_HOST=${{ secrets.VPS_HOST }}
          VPS_HOST_IP=${{ secrets.VPS_HOST_IP }}
          EOF"

      # 7️⃣ Set permissions on scripts
      - name: Fix permissions on server 🌋
        run: ssh deploy-server "chmod -R +x ~/${PACKAGE_NAME}/scripts/*.sh || true"

      # 8️⃣ Deploy application
      - name: Deploy Application 🚀
        run: |
          ssh deploy-server bash << 'DEPLOY_EOF'
          set -euo pipefail

          # Export all required variables on the remote
          export PACKAGE_NAME="${{ secrets.PACKAGE_NAME }}"
          export PACKAGE_VERSION="${{ secrets.PACKAGE_VERSION }}"
          export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          export DOCKER_PASSWORD="${{ secrets.DOCKER_PASSWORD }}"
          export VPS_HOST_IP="${{ secrets.VPS_HOST_IP }}"
          export PORT="${{ secrets.PORT }}"

          cd ~/$PACKAGE_NAME

          # Login to Docker Hub
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          # Start zero-downtime deployment script
          ./scripts/deploy.sh --version ${{ secrets.PACKAGE_VERSION }}

          docker logout
          docker image prune -f
          DEPLOY_EOF

      # 9️⃣ Cleanup
      - name: Cleanup 🧹
        if: always()
        run: rm -rf ~/.ssh/deploy_key* ~/.ssh/config
