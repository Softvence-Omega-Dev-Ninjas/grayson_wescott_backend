name: CD Pipeline with Zero Downtime

on:
  workflow_run:
    workflows: ['CI Pipeline']
    types:
      - completed

jobs:
  deploy:
    name: Deploy to VPS with Zero Downtime 🔄
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch == 'main'

    steps:
      - name: Checkout Code 📥
        uses: actions/checkout@v4

      - name: 📋 Verify environment variables
        env:
          NODE_ENV: production
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PACKAGE_NAME: ${{ secrets.PACKAGE_NAME }}
          PACKAGE_VERSION: ${{ secrets.PACKAGE_VERSION }}
          IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_SSH_PRIVATE_KEY_FILE: ${{ github.workspace }}/deploy_key.pem
        run: |
          echo "🧪 Testing variable availability:"
          echo "Node environment: ${NODE_ENV:-'NOT_SET'}"
          echo "Docker username: ${DOCKER_USERNAME:-'NOT_SET'}"
          echo "Package name: ${PACKAGE_NAME:-'NOT_SET'}"
          echo "Package version: ${PACKAGE_VERSION:-'NOT_SET'}"
          echo "Docker image: ${IMAGE_TAG:-'NOT_SET'}"
          echo "VPS host: ${VPS_HOST:-'NOT_SET'}"
          echo "✅ Environment variables are accessible"

      - name: Setup SSH 🔐
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Prefer using the key file created by the setup action; fallback to secret
          if [ -n "${VPS_SSH_PRIVATE_KEY_FILE:-}" ] && [ -f "${VPS_SSH_PRIVATE_KEY_FILE}" ]; then
            echo "Using deploy key from VPS_SSH_PRIVATE_KEY_FILE: $VPS_SSH_PRIVATE_KEY_FILE"
            cp "$VPS_SSH_PRIVATE_KEY_FILE" ~/.ssh/deploy_key
          else
            echo "No VPS_SSH_PRIVATE_KEY_FILE found, falling back to secret"
            echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          fi

          chmod 600 ~/.ssh/deploy_key

          # Add server host key (use VPS_HOST from env)
          if [ -n "${VPS_HOST:-}" ]; then
            ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
          fi
          chmod 644 ~/.ssh/known_hosts

          # Create SSH config for the deploy host
          cat > ~/.ssh/config <<EOF
          Host deploy-server
            HostName ${VPS_HOST}
            User ${VPS_USER}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config

      - name: Test SSH Connection ✅
        run: |
          ssh -o StrictHostKeyChecking=no deploy-server "echo '🎉 SSH Connected Successfully!'"

      - name: Copy Files to Server 📦
        run: |
          echo "Creating directories on remote..."
          ssh deploy-server "mkdir -p ~/${PACKAGE_NAME}/scripts"
          echo "Copying compose.yaml, scripts/ to remote..."
          scp compose.yaml deploy-server:~/${PACKAGE_NAME}/
          scp -r scripts deploy-server:~/${PACKAGE_NAME}/
          echo "✅ Files copied successfully"

      - name: Fix permissions on server 🌋
        run: |
          ssh deploy-server "chmod -R +x ~/${PACKAGE_NAME}/scripts/*.sh || true"

      - name: Deploy Application 🚀
        run: |
          ssh deploy-server bash << 'DEPLOY_EOF'
          set -euo pipefail

          cd ~/${{secrets.PACKAGE_NAME}}

          # Login to Docker Hub (use secrets embedded by Actions)
          echo "${{secrets.DOCKER_PASSWORD}}" | docker login -u "${{secrets.DOCKER_USERNAME}}" --password-stdin

          # Update Package tag, version and name & docker username inside .env
          # if env not found fail the deployment
          if [ -f .env ]; then
            echo "Updating .env file..."
            sed -i "s/IMAGE_TAG=.*/IMAGE_TAG=${IMAGE_TAG}/" .env
            sed -i "s/PACKAGE_NAME=.*/PACKAGE_NAME=${PACKAGE_NAME}/" .env
            sed -i "s/PACKAGE_VERSION=.*/PACKAGE_VERSION=${PACKAGE_VERSION}/" .env
            sed -i "s/DOCKER_USERNAME=.*/DOCKER_USERNAME=${DOCKER_USERNAME}/" .env
          else
            echo "❌ Error: .env file not found"
            exit 1
          fi

          # Show brief verification
          echo "Package name: ${PACKAGE_NAME:-'NOT_SET'}"
          echo "Package version: ${PACKAGE_VERSION:-'NOT_SET'}"
          echo "Docker image tag: ${IMAGE_TAG:-'NOT_SET'}"
          echo "NODE_ENV: ${NODE_ENV:-'NOT_SET'}"
          echo "VPS host: ${VPS_HOST:-'NOT_SET'}"
          echo "✅ Environment variables ready on remote"

          # Run the deployment script (zero-downtime)
          echo "Starting zero-downtime deployment..."
          ./scripts/deploy.sh --version "$PACKAGE_VERSION"

          docker logout
          docker image prune -f
          DEPLOY_EOF

      - name: Cleanup 🧹
        if: always()
        run: |
          rm -rf ~/.ssh/deploy_key* ~/.ssh/config
          rm -f .env
